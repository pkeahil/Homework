
# Paul Lupeituu
# CS 2340
# November 14, 2020
# This program uses the Data Cache Simulator and the Instruction Counter Tools
# in order to help us visualize the efficiency of each of these sorting algorithms.
	
			

			.data
array:	.word	19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
		
length:	.word	500

		.text

# for(int i = 0; i < length - 1; i++) {
# 	for(int j = i + 1; j < length; j++) {
# 		if(arr[j] < arr[i]) {
#			temp = arr[j];
#			arr[j] = arr[i];
#			arr[i] = temp;
#		}
#	}
# }
		
BubbleSort:
	la	$s0, array	
	lw	$s1, length				
	subi	$s2, $s1, 1				
	li	$t0, 0					
	li	$t1, 0					
	outerLoop:					
		bge	$t0, $s2, exitLoop		
		addi	$t2, $t0, 1			
		addi	$t3, $t1, 4			
		innerLoop:					
			bge	$t2, $s1, continueOuter
			lw	$t4, array($t3)		
			lw	$t5, array($t1)		
			bge	$t4, $t5, continueInner	
			sw	$t4, array($t1)			
			sw	$t5, array($t3)		
		continueInner:				
			addi	$t2, $t2, 1		
			addi	$t3, $t3, 4		
			j	innerLoop		
	continueOuter:					
		addi	$t0, $t0, 1		
		addi	$t1, $t1, 4			
		j	outerLoop		
	exitLoop:					
	
	
	li	$v0, 10
	syscall
		


